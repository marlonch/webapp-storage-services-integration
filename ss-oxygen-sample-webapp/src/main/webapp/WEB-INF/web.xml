<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:web="http://java.sun.com/xml/ns/javaee" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>storage-services-oxy-integration</display-name>
  

  <!--
    Filter responsible with storing the drive of the current user.
    -->
  <filter>
    <filter-name>Dropbox credentials manager</filter-name>
    <filter-class>com.oxygenxml.examples.dbx.DbxManagerFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Dropbox credentials manager</filter-name>
    <!-- 
      For eventy REST request, we need to setup the credentials of the current
      user so that they can be used from the URLStreamHandler.
      -->
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>


  <!--
    Servlet that is called back by the OAuth system with the user code.
    
    Note: This servlet handles the Redirect URI specified in the Dropbox App
    configuration.
    -->
  <servlet>
    <servlet-name>Dropbox OAuth Callback</servlet-name>
    <servlet-class>com.oxygenxml.examples.dbx.AuthCode</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Dropbox OAuth Callback</servlet-name>
    <url-pattern>/dbx/oauth_callback</url-pattern>
  </servlet-mapping>
  
  <!--
    Servlet that is called by Dropbox when a user creates a new
    document or opens an existing one.
    -->
  <servlet>
    <servlet-name>Dropbox Entry Point</servlet-name>
    <servlet-class>com.oxygenxml.examples.dbx.EntryPoint</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Dropbox Entry Point</servlet-name>
    <url-pattern>/dbx/start</url-pattern>
  </servlet-mapping>

 
 
 
 <!--
    Filter responsible with storing the drive of the current user.
    -->
  <filter>
    <filter-name>Google Drive credentials manager</filter-name>
    <filter-class>com.oxygenxml.examples.gdrive.GDriveManagerFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Google Drive credentials manager</filter-name>
    <!-- 
      For eventy REST request, we need to setup the credentials of the current
      user so that they can be used from the URLStreamHandler.
      -->
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>


  <!--
    Servlet that is called back by the OAuth system with the user code.
    
        
    Note: This servlet handles the Redirect URI specified in the Google Drive 
    App configuration.
    -->
  <servlet>
    <servlet-name>Google Drive OAuth Callback</servlet-name>
    <servlet-class>com.oxygenxml.examples.gdrive.AuthCode</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Google Drive OAuth Callback</servlet-name>
    <url-pattern>/gdrive/oauth_callback</url-pattern>
  </servlet-mapping>
  
  <!--
    Servlet that is called by the Google Drive when a user creates a new
    document or opens an existing one.
    -->
  <servlet>
    <servlet-name>Google Drive Entry Point</servlet-name>
    <servlet-class>com.oxygenxml.examples.gdrive.EntryPoint</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Google Drive Entry Point</servlet-name>
    <url-pattern>/gdrive/start</url-pattern>
  </servlet-mapping>
 
 
  <!-- WARNING: This file is generated. Please do not edit between these lines.
    ============================================================================
  -->
  <!-- 
    Filter that sets the charset for HTTP responses received by the server
    to UTF-8. 
  -->
  <filter>
    <filter-name>UTF-8 charset enforcer</filter-name>
    <filter-class>ro.sync.servlet.config.UTF8CharsetEnforcer</filter-class>
  </filter>
  <filter>
    <filter-name>Request context switcher</filter-name>
    <filter-class>ro.sync.servlet.config.OxygenContextFilter</filter-class>
  </filter>
  <!-- This filter is used to correctly identify and license the user
       on behalf of which the request is performed. 
    -->
  <filter>
    <filter-name>License enforcer filter</filter-name>
    <filter-class>ro.sync.ecss.extensions.api.webapp.license.LicenseEnforcerFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>License enforcer filter</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>UTF-8 charset enforcer</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>Request context switcher</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <!-- Listener that initializes and shuts down the app. -->
  <listener>
    <listener-class>ro.sync.servlet.StartupServlet</listener-class>
  </listener>
  <listener>
    <listener-class>org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap</listener-class>
  </listener>
  <servlet>
    <servlet-name>Resteasy</servlet-name>
    <servlet-class>org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Resteasy</servlet-name>
    <url-pattern>/rest/*</url-pattern>
    <url-pattern>/rest-public/*</url-pattern>
    <url-pattern>/rest-files/*</url-pattern>
    <url-pattern>/admin/*</url-pattern>
  </servlet-mapping>
  <servlet>
    <servlet-name>RESTEasy JSAPI</servlet-name>
    <servlet-class>org.jboss.resteasy.jsapi.JSAPIServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>RESTEasy JSAPI</servlet-name>
    <url-pattern>/rest-js/*</url-pattern>
  </servlet-mapping>
  <servlet>
    <servlet-name>Plugins servlets dispatcher</servlet-name>
    <servlet-class>ro.sync.ecss.webapp.plugin.WebappPluginsServletDispatcher</servlet-class>
    <load-on-startup>0</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>Plugins servlets dispatcher</servlet-name>
    <url-pattern>/plugins-dispatcher</url-pattern>
    <url-pattern>/plugins-dispatcher/*</url-pattern>
  </servlet-mapping>
  <servlet>
    <servlet-name>Plugins static resources</servlet-name>
    <servlet-class>ro.sync.ecss.webapp.plugin.WebappPluginStaticResources</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>Plugins static resources</servlet-name>
    <url-pattern>/plugin-resources</url-pattern>
    <url-pattern>/plugin-resources/*</url-pattern>
  </servlet-mapping>

  <!-- Admin-servlet -->
  <security-role>
    <role-name>admin</role-name>
  </security-role>
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>Webapp-require-authentication</web-resource-name>
      <url-pattern>/static/admin.html</url-pattern>
      <url-pattern>/app/admin.html</url-pattern>
      <url-pattern>/admin/*</url-pattern>

      <!-- File uploading doesn't start with rest because the admin page need to upload files and the page may be
           accessed without a license -->
      <url-pattern>/rest-files/*</url-pattern>
      <http-method>DELETE</http-method>
      <http-method>GET</http-method>
      <http-method>POST</http-method>
      <http-method>PUT</http-method>
      <http-method>HEAD</http-method>
      <http-method>TRACE</http-method>
      <http-method>OPTIONS</http-method>
    </web-resource-collection>
    <auth-constraint>
      <role-name>admin</role-name>
    </auth-constraint>
  </security-constraint>
  <login-config>
    <auth-method>BASIC</auth-method>
  </login-config>

  <context-param>
    <param-name>resteasy.scan</param-name>
    <param-value>true</param-value>
  </context-param>
  <context-param>
    <param-name>log4j-properties-location</param-name>
    <param-value>/WEB-INF/log4j.properties</param-value>
  </context-param>
  <!-- 
    ============================================================================
  -->
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>oxygen.html</welcome-file>
  </welcome-file-list>
</web-app>